// Transmitter code


#include <SPI.h>
#include <LoRa.h>
#include <DHT.h>

#define DHTPIN 4 // Pin number for the DHT sensor
#define DHTTYPE DHT11 // Type of DHT sensor (DHT11, DHT22, etc.)

DHT dht(DHTPIN, DHTTYPE); // Initialize the DHT sensor

void setup() {
  Serial.begin(9600); // Initialize serial communication
  while (!Serial); // Wait for serial connection

  // Initialize the LoRa module and configure it for communication
  if (!LoRa.begin(433E6)) { // Set frequency to 433 MHz
    Serial.println("LoRa initialization failed. Check your connections.");
    while (1); // If initialization fails, loop indefinitely
  }

  // Set the spreading factor (SF) and other parameters for the communication
  LoRa.setSpreadingFactor(7); // Set SF to 7
  LoRa.setSignalBandwidth(125E3); // Set signal bandwidth to 125 kHz
  LoRa.setCodingRate4(8); // Set coding rate to 8
  LoRa.setPreambleLength(8); // Set preamble length to 8

  dht.begin(); // Initialize the DHT sensor
}

void loop() {
  // Read the temperature and humidity data from the DHT sensor
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  // Print the temperature and humidity data to the serial monitor
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println(" C");
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.println(" %");

  // Convert the temperature and humidity data to strings
  String temperatureString = String(temperature);
  String humidityString = String(humidity);

  // Concatenate the temperature and humidity strings with a delimiter
  String dataString = temperatureString + "," + humidityString;

  // Transmit the temperature and humidity data over the air using the LoRa module
  LoRa.beginPacket(); // Start the packet
  LoRa.print(dataString); // Add the data to the packet
  LoRa.endPacket(); // End the packet and transmit it

  delay(5000); // Wait 5 seconds before transmitting again
}

// receiver code



#include <SPI.h>
#include <LoRa.h>

void setup() {
  Serial.begin(9600); // Initialize serial communication
  while (!Serial); // Wait for serial connection

  // Initialize the LoRa module and configure it for communication
  if (!LoRa.begin(433E6)) { // Set frequency to 433 MHz
    Serial.println("LoRa initialization failed. Check your connections.");
    while (1); // If initialization fails, loop indefinitely
  }

  // Set the spreading factor (SF) and other parameters for the communication
  LoRa.setSpreadingFactor(7); // Set SF to 7
  LoRa.setSignalBandwidth(125E3); // Set signal bandwidth to 125 kHz
  LoRa.setCodingRate4(8); // Set coding rate to 8
  LoRa.setPreambleLength(8); // Set preamble length to 8
}

void loop() {
  // Check if there is data available to be received
  int packetSize = LoRa.parsePacket();
  if (packetSize) {
    // Read the data from the packet
    String dataString = "";
    while (LoRa.available()) {
      dataString += (char)LoRa.read();
    }

    // Print the received data to the serial monitor
    Serial.println(dataString);
  }

  delay(10); // Wait 10 milliseconds before checking for new data
}
